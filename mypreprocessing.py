# -*- coding: utf-8 -*-
"""myPreprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HoIhlycT1lIjfOv8_bL9_JnUl9dH_4Hj
"""

import numpy as np

def zscore(train_data,test_data,valid_data):
  #Se calcula la media para cada columna
  train_col_means = np.mean(train_data, axis=0)  #axis=0 significa en las columnas
  test_col_means  = np.mean(test_data,  axis=0)  #axis=0 significa en las columnas
  valid_col_means = np.mean(valid_data, axis=0)  #axis=0 significa en las columnas

  #Se calcula la desviación estándar para cada columna
  train_col_stds = np.std(train_data, axis=0)  #axis=0 significa en las columnas
  test_col_stds  = np.std(test_data,  axis=0)  #axis=0 significa en las columnas
  valid_col_stds = np.std(valid_data, axis=0)  #axis=0 significa en las columnas


  # se calcula el zscore=(X-means)/stds y ese es el nuevo dataset

  proc_train_data = ( train_data - train_col_means ) / ( train_col_stds )
  proc_test_data  = ( test_data -  test_col_means )  / ( test_col_stds )
  proc_valid_data = ( valid_data - valid_col_means ) / ( valid_col_stds )


  # print(np.mean(train_data))
  # print(np.std(train_data))
  # print("-----------------------")
  # print(np.mean(test_data))
  # print(np.std(test_data))
  # print("-----------------------")
  # print(np.mean(valid_data))
  # print(np.std(valid_data))
  # print("-----------------------")
  return[proc_train_data,proc_test_data,proc_valid_data]





def get_labeled_data(input_labels):
    Y=[]
    
    for label in input_labels:
        
        if label==1:
            
            Y.append([0,1,0])
        
        if label==0:
            
            Y.append([1,0,0])
            
        if label==55:
            
            Y.append([0,0,1])    
            
            
        
    return np.array(Y)



















